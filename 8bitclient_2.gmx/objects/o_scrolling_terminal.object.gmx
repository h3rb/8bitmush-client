<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.active_window=id;

global.terminal=id;

global.default_fore_color=7; // Default: gray
global.default_back_color=0; // Default: black
global.fore_color=global.default_fore_color;
global.back_color=global.default_back_color;

clickDelay=0;

global.cursor="|";

local_echo=true;

sidebar_is_open=false;
use_term_font=true;
double_font=true;
resize_font=false;
fscale=1.5;

scroll=0;

cursor="";
cursorRate=1;
cursorDelay=cursorRate;

// Terminal writing location
col=0;
row=0;

maxwidth=81;
maxrows=350;

//oldlen=0;
//len=0;
//maxcharacters=65535;
input="";
input_font=term12;

// Create the "terminal screen array" that stores fully colorized FANSI, limit ~400 lines
var i,j;
for ( j=0; j&lt;maxrows; j++ ) {
 for ( i=0; i&lt;maxwidth; i++ ) {
  character[i,j]=ord(" ");
  fore[i,j]=7;
  back[i,j]=0;
 }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( clickDelay &gt; 0 ) clickDelay-=1/room_speed;
// oldlen=string_length(input);
 input=keyboard_string;
// if ( oldlen != len ) audio_play_sound(sfx_keypress,1,0);
// len=oldlen;
// if (string_length(input) &gt; maxcharacters) {
//  value = string_copy(value, 1, maxcharacters);
//  keyboard_string=value;
// }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode(bm_normal);


var mx = window_mouse_get_x();
var my = window_mouse_get_y();

if ( mouse_wheel_up() ) {
 scroll-=1;
} else if ( mouse_wheel_down() and scroll &lt; 10 ) {
 scroll+=1;
}

var mcol=0;
var mrow=0;
var c=" ";

var fw=8;
var fh=12;
var font;
if ( use_term_font ) font=s_term_font; // s_fansi
else font=s_fansi_font;
var text_scale=1;

if ( not sidebar_is_open ) {
 if ( use_term_font ) {
  if ( double_font ) {
   fw *= 2;
   fh *= 2;
   font=s_term_font_big; // s_fansi_big
   text_scale=1.0;
  } else if ( resize_font ) {
   fw *= fscale;
   fh *= fscale;
   font=s_term_font;
   text_scale=fscale;
  }
 } else {
  if ( double_font ) {
   fw *= 2;
   fh *= 2;
   font=s_fansi_font_big;
   text_scale=1.0;
  } else if ( resize_font ) {
   fw *= fscale;
   fh *= fscale;
   font=s_fansi_font;
   text_scale=fscale;
  }
 }
}

var display_rows=(window_get_height()*0.8)/fh;
var srow=row-display_rows+scroll;
if ( srow &lt; 0 ) srow=0;
var i,j;
for ( j=0; j&lt;display_rows; j++ ) {
 for ( i=0; i&lt;maxwidth; i++ ) {
  if ( j+srow &lt; maxrows ) {
   var m=i * fw;
   var n=j * fh;
   var x1=m;
   var y1=n;
   var x2=m+fw-1;
   var y2=n+fh-1;
   draw_set_color(global.fansi_color[back[i,j+srow]]);
   draw_rectangle(m,n,m+fw,n+fh,false);
   if ( WITHIN(mx,my,x1,y1,x2,y2) ) {
    draw_set_color(c_blue);
    mcol=i;
    mrow=j;
    c=chr(character[i,j+srow]);
    draw_rectangle(m,n,m+fw-1,n+fh-1,true);
   } // else draw_set_color(make_color_rgb(32,32,32));
   draw_sprite_ext(
    font,character[i,j+srow],
    m,n,text_scale,text_scale,0,global.fansi_color[fore[i,j+srow]],1
   );
  }
 }
}

//closed sidebar
if ( not sidebar_is_open ) {
 var sbx=window_get_width()-64;
 var sby=0;
 var sbx2=window_get_width();
 var sby2=window_get_height()*0.8;
 if ( WITHIN(mx,my,sbx,sby,sbx2,sby2) ) {
  if ( mouse_check_button(mb_any) ) {
   draw_set_color(c_aqua);
   draw_rectangle(sbx,sby,sbx2,sby2,false);
   if ( my &lt; 64 and clickDelay &lt;= 0.0 ) {
    clickDelay=0.5;
    sidebar_is_open=true;
   }
  } else {
   draw_set_color(c_blue);
   draw_rectangle(sbx,sby,sbx2,sby2,false);
  }
 } else {
   draw_set_color(make_color_rgb(0,12,32));
   draw_rectangle(sbx,sby,sbx2,sby2,false);
 }
 draw_set_color(c_dkgray);
 draw_rectangle( sbx+8, sby+8, sbx2-8, sby2-8, true );
 draw_sprite_ext( s_fansi_font_big, 27, sbx+16, sby+16, 1, 1, 0, c_white, 1 );
} else {
 var sbx=window_get_width()-64*5;
 var sby=0;
 var sbx2=window_get_width();
 var sby2=window_get_height()*0.8;
 if ( WITHIN(mx,my,sbx,sby,sbx2,sby2) ) {
  if ( mouse_check_button(mb_any) ) {
   draw_set_color(c_aqua);
   draw_rectangle(sbx,sby,sbx2,sby2,false);
   if ( my &lt; 64 and clickDelay &lt;= 0.0 ) {
    clickDelay=0.5;
    sidebar_is_open=false;
   }
  } else {
   draw_set_color(c_blue);
   draw_rectangle(sbx,sby,sbx2,sby2,false);
  }
 } else {
   draw_set_color(make_color_rgb(0,12,32));
   draw_rectangle(sbx,sby,sbx2,sby2,false);
 }
 draw_set_color(c_dkgray);
 draw_rectangle( sbx+8, sby+8, sbx2-8, sby2-8, true );
 draw_sprite_ext( s_fansi_font_big, 26, sbx+16, sby+16, 1, 1, 0, c_white, 1 );
}

// input window
var iwx=0;
var iwy=window_get_height()*0.8;
var iwx2=window_get_width();
var iwy2=window_get_height();

/*
if ( WITHIN(mx,my,iwx,iwy,iwx2,iwy2) ) {
 if ( mouse_check_button(mb_any) ) {
  draw_set_color(c_aqua);
  draw_rectangle(iwx,iwy,iwx2,iwy2,false);
 } else {
  draw_set_color(c_blue);
  draw_rectangle(iwx,iwy,iwx2,iwy2,false);
 }
} else {
 draw_set_color(make_color_rgb(0,12,32));
 draw_rectangle(iwx,iwy,iwx2,iwy2,false);
}
*/

draw_set_color(make_color_rgb(0,12,32));
draw_rectangle(iwx,iwy,iwx2,iwy2,false);

draw_set_font(input_font);
draw_set_color(c_gray);
//draw_text(12,12,global.screen_text);

cursorDelay-=1/room_speed;
if ( cursorDelay &lt; 0 ) {
 cursor="";
 if ( cursorDelay &gt; -cursorRate ) cursorDelay=cursorRate;
} else cursor=global.cursor;

draw_set_color(c_orange);
draw_text( 12, window_get_height()*0.8+20,
 "M:"+int(mcol)+","+int(mrow)+" '"+c+"' c("+int(ord(c))+")"
 +" P:"+int(col)+","+int(row)+"#"+int(global.network.lines)+" lines read"
 +"#&gt; "+input+cursor
);

// draw_text( mx,my, global.network.screen_text );

draw_set_alpha(1);
draw_set_color(c_gray);
draw_rectangle(16,16,window_get_width()-64,384,false);
render_keyboard(
 32,32,window_get_width(),window_get_height()*0.8
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_send();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
