<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.painter=id;
global.draw_ui=true;
visible=false;

last_mouse_cell_x=-1;
last_mouse_cell_y=-1;

mode_move=false;
mode_typetext=false;
mode_hb_brush=false;
mode_hb_line=false;
mode_hb_poly=false;
mode_hb_poly_filled=false;
mode_hb_circle=false;
mode_hb_circle_filled=false;
mode_hb_rect=false;
mode_hb_rect_filled=false;
mode_ascii_1box=false;
mode_ascii_2box=false;
mode_ascii_rect=false;
mode_ascii_line=false;
mode_elfmagic=false;
mode_color_only=false;
mode_color_ramp=false;
mode_ascii_circle=false;
mode_ascii_circle_filled=false;
mode_glob=false;
mode_pencil=false;
mode_eyedropper=false;
mode_fill=false;
mode_select_copy=false;
mode_paste_all=false;
mode_paste_fit=false;
mode_grid=true;

draw_x=-1;
draw_y=-1;
draw_ramp_fore=0;
draw_ramp_back=0;
ramp_fore=0;
ramp_back=0;
color_ramp_fore[0]=0;
color_ramp_back[0]=0;

zoom=2.0;

fansichar=64;
fansifore=15;
fansiback=0;

var i,j;
for ( i=0; i &lt; 100; i++ ) for ( j=0; j &lt; 100; j++ ) {
 _fore[i+j*100]=0;
 _back[i+j*100]=0;
 _char[i+j*100]=32; // space
}

workw=80;
workh=100;
_xofs=-4;
_yofs=-16;
canvas_x=20;
canvas_y=20;
canvas_w=40;
canvas_h=20;

_basew=sprite_get_width(s_fansi_font);
_baseh=sprite_get_height(s_fansi_font);

show_fansi_chars=false;
fc_w=sprite_get_width(s_fansi_chars);
fc_h=sprite_get_height(s_fansi_chars);
fc_x=room_width-32-fc_w-16;
fc_y=room_height-16-fc_h;
fc_cell_w=fc_w/32;
fc_cell_h=fc_h/8;

stored_x=-1;
stored_y=-1;

show_fansi_pal=false;
fp_w=sprite_get_width(s_fansi_pal);
fp_h=sprite_get_height(s_fansi_pal);
fp_x=room_width-32-16-fp_w;
fp_y=room_height-16-fp_h;
fp_x2=fp_x+fp_w-1;
fp_y2=fp_y+fp_h-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset just the exclusive ones
mode_move=false;
mode_typetext=false;
mode_hb_brush=false;
mode_hb_line=false;
mode_hb_poly=false;
mode_hb_poly_filled=false;
mode_hb_circle=false;
mode_hb_circle_filled=false;
mode_hb_rect=false;
mode_hb_rect_filled=false;
mode_ascii_1box=false;
mode_ascii_2box=false;
mode_ascii_rect=false;
mode_ascii_line=false;
mode_elfmagic=false;
mode_ascii_circle=false;
mode_ascii_circle_filled=false;
mode_glob=false;
mode_pencil=false;
mode_eyedropper=false;
mode_fill=false;
mode_select_copy=false;
mode_paste_all=false;
mode_paste_fit=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the painter

 mouse_left=mouse_check_button(mb_left);
 mouse_right=mouse_check_button(mb_right);
 mouse_any=mouse_check_button(mb_any);

using_menu = (mouse_x &lt; 150)
 or ( show_fansi_chars and mouse_x &gt; fc_x and mouse_y &gt; fc_y )
 or ( show_fansi_pal and mouse_x &gt; fp_x and mouse_y &gt; fp_y );

if ( using_menu ) window_set_cursor(cr_handpoint);
else if ( mode_move ) window_set_cursor(cr_size_all);
else window_set_cursor(cr_cross);

cell_w=_basew*zoom;
cell_h=_baseh*zoom;

start_x=_xofs*cell_w;
start_y=_yofs*cell_h;

canvas_offset_x=start_x+canvas_x*cell_w;
canvas_offset_y=start_y+canvas_y*cell_h;

canvas_offset_wx=canvas_offset_x+(canvas_w*cell_w);
canvas_offset_wy=canvas_offset_y+(canvas_h*cell_h);


mouse_cell_x=-1;
mouse_cell_y=-1;
top_half=false;
for ( i=0; i &lt; workw; i++ ) for ( j=0; j &lt; workh; j++ ) {
 dx=start_x+cell_w*i;
 dy=start_y+cell_h*j;
 dx2=dx+cell_w;
 dy2=dy+cell_h;
 hby=dy+cell_h/2; // half block width indicator
 if ( dx2 &gt; 0 &amp;&amp; dy2 &gt; 0 &amp;&amp; dx &lt; room_width &amp;&amp; dy &lt; room_height ) {
  write_fansi(
   chr(_char[i+j*workw]),
   s_fansi_font,zoom,
   dx,dy,
   _fore[i+j*workw],
   _back[i+j*workw],
   0, 1.0, 2
  );
  if ( mode_grid ) if ( WITHIN(i,j,canvas_x,canvas_y,canvas_x+canvas_w-1,canvas_y+canvas_h-1) ) {
   draw_set_color(make_color_rgb(16,16,16));  
   draw_rectangle(dx,dy,dx2,hby,true);
   draw_set_color(make_color_rgb(24,24,24));  
   draw_rectangle(dx,dy,dx2,dy2,true);
  }
  if ( !using_menu ) if ( WITHIN(mouse_x,mouse_y,dx,dy,dx2-1,dy2-1) ) {
   mouse_cell_x=i;
   mouse_cell_y=j;
   draw_set_color(make_color_rgb(216,16,16));
   draw_rectangle(dx,dy,dx2-1,dy2-1,true);
   draw_set_color(c_lime);
   top_half=( mouse_y-mouse_cell_y*cell_h &lt; hby-mouse_cell_y*cell_h );
   if ( top_half ) draw_rectangle(dx,dy,dx2-1,hby-1,true);
   else draw_rectangle(dx,hby,dx2-1,dy2-1,true);
   if ( mode_pencil ) write_fansi(
    chr(fansichar),
    s_fansi_font,zoom,
    dx,dy,fansifore,fansiback,
    0, 0.5, 2
   );
   else if ( mode_typetext ) write_fansi(
    "T",
    s_fansi_font,zoom,
    dx,dy,fansifore,fansiback,
    0, 0.5, 2
   );
  }
 }
}

total_zoomed_w=workw*cell_w;
total_zoomed_h=workh*cell_h;

draw_set_blend_mode(bm_normal);
draw_set_color(make_color_rgb(64,64,64));
draw_rectangle(start_x,start_y,start_x+total_zoomed_w,start_y+total_zoomed_h,true);

draw_set_color(make_color_rgb(127,127,127));
draw_rectangle(canvas_offset_x,canvas_offset_y,canvas_offset_wx,canvas_offset_wy,true);

// pixel painter to term
if ( rricobutton(10,10,s_painter_toolbar,0,false) )
 if ( mouse_check_button_pressed(mb_any) ) {
 var i,j,out,canvas_x2,canvas_y2,same,here,next,stop,chars,code;
 global.t_p_c="th [if(fbexists(CLIENT),[fbdestroy(CLIENT)])]"
  +"[fbcreate(CLIENT,"+int(canvas_w)+","+int(canvas_h)+")]"+chr(13);
 canvas_x2=canvas_x+canvas_w;
 canvas_y2=canvas_y+canvas_h;
 for ( j=0; j&lt;canvas_h; j++ ) {
  jpos=(j+canvas_y)*workw;
  stop=canvas_x2+jpos;
  here=canvas_x+jpos;
  global.t_p_c+="th [fbwrite(CLIENT,0,"+int(j)+",";
  while ( here != stop ) {
   chars="";
   if ( _char[here] &gt;= 32 and _char[here] &lt;= 126 ) {
    if ( _char[here] == 32 ) chars=chars+"%b";
    else if ( _char[here] == 37 ) chars=chars+"%%";
    else chars+=chr(_char[here]);
   } else chars=chars+"[c("+int(_char[here])+")]";
   code="[color("+int(_fore[here])+","+int(_back[here])+","+chars+")]";
   global.t_p_c+=code;
   here++;
  }
  global.t_p_c+=")]"+chr(13);
 }
 show_debug_message(global.t_p_c);
 global.terminal.input=global.t_p_c+"th fbdump(CLIENT)"+chr(13);
 network_send();
 global.draw_ui=true;
 visible=false;
}

// movement
if ( rricobutton(10,10*2+32,s_painter_toolbar,1,mode_move) )
 if ( mouse_check_button_pressed(mb_any) ) {
 mode_move=!mode_move;
}
if ( keyboard_check(vk_right) ) {
 if ( mode_move ) {
  if ( !keyboard_check(vk_control) ) canvas_x-=1; else canvas_x-=8;
  if ( canvas_x &lt; 0 ) canvas_x=0;
 } else {
  if ( !keyboard_check(vk_control) ) _xofs-=1; else _xofs-=8;
  if ( _xofs &lt; -workw ) _xofs=-workw;
 }
}
if ( keyboard_check(vk_down) ) {
 if ( mode_move ) {
  if ( !keyboard_check(vk_control) ) canvas_y-=1; else canvas_y-=8;
  if ( canvas_y &lt; 0 ) canvas_y=0;
 } else {
  if ( !keyboard_check(vk_control) ) _yofs-=1; else _yofs-=4;
  if ( _yofs &lt; -workh ) _yofs=-workh;
 }
}
if ( keyboard_check(vk_up) ) { 
 if ( mode_move ) {
  if ( !keyboard_check(vk_control) ) canvas_y+=1; else canvas_y+=4;
  if ( canvas_y &gt; workh-canvas_h ) canvas_y=workh-canvas_h;
 } else {
  if ( !keyboard_check(vk_control) ) _yofs+=1; else _yofs+=4;
  if ( _yofs &gt; workh ) _yofs=workh;
 }
}
if ( keyboard_check(vk_left) ) {
 if ( mode_move ) {
  if ( !keyboard_check(vk_control) ) canvas_x+=1; else canvas_x+=8;
  if ( canvas_x &gt; workw-canvas_w ) canvas_x=workw-canvas_w;
 } else {
  if ( !keyboard_check(vk_control) ) _xofs+=1; else _xofs+=8;
  if ( _xofs &gt; workw ) _xofs=workw;
 }
}

// text entry
if ( rricobutton(10,10*3+64,s_painter_toolbar,2,mode_typetext) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_typetext=true;
}

// halfblock brush
if ( rricobutton(10,10*4+96,s_painter_toolbar,3,mode_hb_brush) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_hb_brush=true;
}

// halfblock line
if ( rricobutton(10,10*5+128,s_painter_toolbar,4,mode_hb_line) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_hb_line=true;
}

if ( rricobutton(10,10*6+128+32,s_painter_toolbar,5,mode_hb_poly) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_hb_poly=true;
}

if ( rricobutton(10,10*7+128+64,s_painter_toolbar,6,mode_hb_poly_filled) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_hb_poly_filled=true;
}

if ( rricobutton(10,10*8+128+96,s_painter_toolbar,7,mode_hb_circle) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_hb_circle=true;
}

if ( rricobutton(10,10*9+256,s_painter_toolbar,8,mode_hb_circle_filled) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_hb_circle_filled=true;
}

if ( rricobutton(10,10*10+256+32,s_painter_toolbar,9,mode_hb_rect) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_hb_rect=true;
}

if ( rricobutton(10,10*11+256+64,s_painter_toolbar,10,mode_hb_rect_filled) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_hb_rect_filled=true;
}

if ( rricobutton(10,10*12+256+96,s_painter_toolbar,11,mode_ascii_1box) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_ascii_1box=true;
}

if ( rricobutton(10,10*13+256+128,s_painter_toolbar,12,mode_ascii_2box) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_ascii_2box=true;
}

if ( rricobutton(10,10*14+256+128+32,s_painter_toolbar,13,mode_ascii_rect) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_ascii_rect=true;
}

if ( rricobutton(10,10*15+256+192,s_painter_toolbar,14,mode_ascii_line) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_ascii_line=true;
}

if ( rricobutton(10,10*16+256+192+32,s_painter_toolbar,15,mode_elfmagic) )
 if ( mouse_check_button_pressed(mb_any) ) {
 mode_elfmagic=!mode_elfmagic;
}

if ( rricobutton(10,10*17+512,s_painter_toolbar,16,mode_color_only) )
 if ( mouse_check_button_pressed(mb_any) ) {
 mode_color_only=!mode_color_only;
}

if ( rricobutton(10,10*18+512+32,s_painter_toolbar,17,mode_color_ramp) )
 if ( mouse_check_button_pressed(mb_any) ) {
 mode_color_ramp=!mode_color_ramp;
}

if ( rricobutton(10+64+10,10,s_painter_toolbar,18,mode_ascii_circle) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_ascii_circle=true;
}

if ( rricobutton(10+64+10,10*2+32,s_painter_toolbar,19,mode_ascii_circle_filled) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_ascii_circle_filled=true;
}

if ( rricobutton(10+64+10,10*3+64,s_painter_toolbar,20,false) )
 if ( mouse_check_button_pressed(mb_any) ) {
 zoom *= 2.0;
 if ( zoom &gt; 16.0 ) zoom=0.125;
}
if ( mouse_wheel_up()        ) { zoom*=2.0; if ( zoom &gt; 16.0 )  zoom=16.0;  }
else if ( mouse_wheel_down() ) { zoom/=2.0; if ( zoom &lt; 0.125 ) zoom=0.125; }
if ( keyboard_check(vk_add)) { zoom*=2.0; if ( zoom &gt; 16.0 )  zoom=16.0;  }
if ( keyboard_check(vk_subtract)) { zoom/=2.0; if ( zoom &lt; 0.125 ) zoom=0.125; }

if ( rricobutton(10+64+10,10*4+96,s_painter_toolbar,21,mode_glob) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_glob=true;
}

if ( rricobutton(10+64+10,10*5+128,s_painter_toolbar,22,false) )
 if ( mouse_check_button_pressed(mb_any) ) {
}

if ( rricobutton(10+64+10,10*6+160,s_painter_toolbar,23,mode_pencil) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_pencil=true;
}

if ( rricobutton(10+64+10,10*7+192,s_painter_toolbar,24,mode_eyedropper) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_eyedropper=true;
}

if ( rricobutton(10+64+10,10*8+192+32,s_painter_toolbar,25,mode_fill) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_fill=true;
}

if ( rricobutton(10+64+10,10*9+256,s_painter_toolbar,26,false) )
 if ( mouse_check_button_pressed(mb_any) ) {
}

if ( rricobutton(10+64+10,10*10+256+32,s_painter_toolbar,27,mode_select_copy) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_select_copy=true;
}

if ( rricobutton(10+64+10,10*11+256+64,s_painter_toolbar,28,mode_paste_all) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_paste_all=true;
}

if ( rricobutton(10+64+10,10*12+256+96,s_painter_toolbar,29,mode_paste_fit) )
 if ( mouse_check_button_pressed(mb_any) ) {
 event_user(0);
 mode_paste_fit=true;
}

if ( rricobutton(10+64+10,10*13+256+128,s_painter_toolbar,30,false) )
 if ( mouse_check_button_pressed(mb_any) ) {
}

// Resize
if ( rricobutton(10+64+10,10*14+256+160,s_painter_toolbar,31,false) )
 if ( mouse_check_button_pressed(mb_any) ) {
 resize_str=get_string("Enter the width and height size values seperated by a space like: 40 20",int(canvas_w)+" "+int(canvas_h));
 sizes=string_split(resize_str," ");
 if ( sizes == 2 ) {
  canvas_w=real(global.split[0]);
  canvas_h=real(global.split[1]);
  if ( canvas_w &gt; 79 ) canvas_w=79;
  if ( canvas_h &gt; 50 ) canvas_h=50;
  if ( canvas_w &lt; 1 ) canvas_w=1;
  if ( canvas_h &lt; 1 ) canvas_h=1;
  if ( workw-canvas_x &lt; canvas_w ) canvas_x=workw-canvas_w;
  if ( workh-canvas_y &lt; canvas_h ) canvas_y=workh-canvas_h;
 }
}

// Save file
if ( rricobutton(10+64+10,10*15+256+192,s_painter_toolbar,32,false) )
 if ( mouse_check_button_pressed(mb_any) ) {
 outfile=int(workw)+","+int(workh)+",";
 lastpos=(workw-1)*(workh-1);
 for ( j=0; j&lt;workh; j++ ) { 
  for ( i=0; i&lt;workw; i++ ) {
   pos=i+j*workw;
   outfile=outfile+int(_char[pos])+","+int(_fore[pos])+","+int(_back[pos]);
   outfile=outfile+",";
  }
 }
 string_as_file(outfile,get_save_filename("FANSI|*.FANSI","Choose a place and name the FANSI file to save"));
}

// Load File
if ( rricobutton(10+64+10,10*16+256+192+32,s_painter_toolbar,33,false) )
 if ( mouse_check_button_pressed(mb_any) ) {
 infile=file_as_string(get_open_filename("FANSI|*.FANSI","Choose a FANSI Paint file to load"));
 total=string_split(infile,',');
 s=0;
 workw=real(global.split[0]); s+=1;
 workh=real(global.split[1]); s+=1;
 for ( j=0; j&lt;workh; j++ ) { 
  for ( i=0; i&lt;workw; i++ ) {
   pos=i+j*workw;
   _char[pos]=real(global.split[s]); s+=1;
   _fore[pos]=real(global.split[s]); s+=1;
   _back[pos]=real(global.split[s]); s+=1;
  }
 }
 show_message("Loaded "+int(total-2)+" FANSI Characters");
}

// Big Red X - Clear Picture
if ( rricobutton(10+64+10,10*17+512,s_painter_toolbar,34,false) )
 if ( mouse_check_button_pressed(mb_any) ) {
 if ( yesno("Clear the entire viewing panel?") ) {
  var i,j;
  for ( i=0; i &lt; 100; i++ ) for ( j=0; j &lt; 100; j++ ) {
   _fore[i+j*100]=0;
   _back[i+j*100]=0;
   _char[i+j*100]=32; // space
  }
 }
}

// Grid mode toggle
if ( rricobutton(10+64+10,10*18+512+32,s_painter_toolbar,35,mode_grid) )
 if ( mouse_check_button_pressed(mb_any) ) {
 mode_grid=!mode_grid;
}

mode_string="Inspect Character (Default Mode)";
if ( mode_typetext ) mode_string="Text Entry ";
if ( mode_hb_brush ) mode_string="Half-block Brush ";
if ( mode_hb_line ) mode_string="Half-block Line ";
if ( mode_hb_poly ) mode_string="Half-block Polygon ";
if ( mode_hb_poly_filled ) mode_string="Half-block Filled Polygon ";
if ( mode_hb_circle ) mode_string="Half-block Circle ";
if ( mode_hb_circle_filled ) mode_string="Half-block Filled Circle ";
if ( mode_hb_rect ) mode_string="Half-block Rectangle ";
if ( mode_hb_rect_filled ) mode_string="Half-block Filled Rectangle ";
if ( mode_ascii_1box ) mode_string="ASCII Box ";
if ( mode_ascii_2box ) mode_string="ASCII Double-lined Box ";
if ( mode_ascii_rect ) mode_string="ASCII Character-filled Rectangle ";
if ( mode_ascii_line ) mode_string="ASCII Character Line ";
if ( mode_ascii_circle ) mode_string="ASCII Circle ";
if ( mode_ascii_circle_filled ) mode_string="ASCII Filled Circle ";
if ( mode_pencil ) mode_string="Classic ASCII Pencil ";
if ( mode_fill ) mode_string="Paint Bucket Fill ";

if ( mode_paste_all ) mode_string=mode_string+"Paste at Brush ";
if ( mode_paste_fit ) mode_string=mode_string+"Paste but Fit to Region ";

if ( mode_elfmagic ) mode_string=mode_string+"with Magic ";
if ( mode_color_only ) mode_string=mode_string+"but change Color only ";
if ( mode_color_ramp ) mode_string=mode_string+"with color ramp ";
if ( mode_glob ) mode_string=mode_string+"using Glob Mutator ";

if ( mode_move ) mode_string="Move Canvas";
if ( mode_eyedropper ) mode_string="Color Extraction Tool";
if ( mode_select_copy ) mode_string="Select Region (and Copy to Clipboard)";

if ( show_fansi_chars ) {
 write_fansi(chr(fansichar),s_fansi_font_big,2.0,room_width-32,room_height-64,fansifore,fansiback,0,1.0,2);
 draw_sprite_ext(s_fansi_chars,0,fc_x,fc_y,1.0,1.0,0,c_white,0.9);
  // Draw a box indicating space
  draw_set_color(c_gray);
  draw_set_blend_mode(bm_normal);
  draw_rectangle(
   fc_x+0*fc_cell_w+8,
   fc_y+1*fc_cell_h+8,
   fc_x+1*fc_cell_w-8,
   fc_y+2*fc_cell_h-8,
   true
  );
 
 if ( WITHIN(mouse_x,mouse_y,fc_x,fc_y,fc_x+770,fc_y+260) ) {
  fc_mx=(mouse_x-fc_x)/fc_w;
  fc_my=(mouse_y-fc_y)/fc_h;
  fc_char_x=real(int(fc_mx*32-0.5));
  fc_char_y=real(int(fc_my*8-0.5));
  fansichar=real(int(fc_char_x+fc_char_y*32));
  if ( fansichar &lt; 1 or fansichar == 2 or fansichar == 7 or fansichar == 8
    or fansichar == 9 or fansichar == 10 or fansichar == 11 or fansichar == 12
    or fansichar == 12 or fansichar == 13 or fansichar == 27 or fansichar == 255 )
   fansichar=33;
  if ( mouse_check_button_pressed(mb_any) ) show_fansi_chars=false;
  draw_set_color(c_blue);
  draw_set_blend_mode(bm_add);
  draw_rectangle(
   fc_x+fc_char_x*fc_cell_w,
   fc_y+fc_char_y*fc_cell_h,
   fc_x+(fc_char_x+1)*fc_cell_w,
   fc_y+(fc_char_y+1)*fc_cell_h,
   false
  );
  if ( mouse_check_button_pressed(mb_any) ) show_fansi_chars=false;  
  draw_set_blend_mode(bm_normal);
 }
} else {
 write_fansi(chr(fansichar),s_fansi_font_big,2.0,room_width-32,room_height-64,fansifore,fansiback,0,1.0,2);
 draw_set_blend_mode(bm_add);
 draw_set_color(make_color_rgb(108,108,108));
 draw_rectangle(room_width-32,room_height-64,room_width-1,room_height-1,true);
 draw_set_blend_mode(bm_normal);
 if ( WITHIN(mouse_x,mouse_y,room_width-32,room_height-64,room_width,room_height) ) {
  if ( mouse_check_button_pressed(mb_any) ) { 
   show_fansi_chars=!show_fansi_chars;
   show_fansi_pal=false;
  }
 }
}

if ( show_fansi_pal ) {
 draw_sprite_ext(s_fansi_pal,0,fp_x,fp_y,1.0,1.0,0,c_white,1.0);
 f_pal_color=-1;
 if ( WITHIN(mouse_x,mouse_y,fp_x,fp_y,fp_x2,fp_y2) ) {
  fp_mx=(mouse_x-fp_x)/fp_w;
  fp_my=(mouse_y-fp_y)/fp_h;
  fp_row=real(int(fp_my*14+0.5))-1;
  fp_col=-1;
  if ( fp_row &lt; 2 ) {
   if ( fp_row &lt;= 0 ) { // Row 0 : Grayscale
    fp_col=real(int(fp_mx*24+0.5))-1;
    f_pal_color=232+fp_col;
   } else { // Row 1 : ANSI Standard
    fp_col=real(int(fp_mx*16+0.5))-1;
    f_pal_color=fp_col;
   }
  } else {
   fp_col=real(int(fp_mx*18+0.5))-1;
   if ( fp_col &lt; 6 ) { // Rows 2-14, FANSI Color Cube
    f_pal_color=fp_col;
    switch ( fp_row ) { // Left Column
     case  2: f_pal_color+=16; break;
     case  3: f_pal_color+=22; break;
     case  4: f_pal_color+=28; break;
     case  5: f_pal_color+=34; break;
     case  6: f_pal_color+=40; break;
     case  7: f_pal_color+=46; break;
     case  8: f_pal_color+=124; break;
     case  9: f_pal_color+=130; break;
     case 10: f_pal_color+=136; break;
     case 11: f_pal_color+=142; break;
     case 12: f_pal_color+=148; break;
     case 13: f_pal_color+=154; break;
     default: f_pal_color=-1; break;
    }
   } else if ( fp_col &lt; 12 ) {
    f_pal_color=fp_col-6;
    switch ( fp_row ) { // Middle Column
     case  2: f_pal_color+=52; break;
     case  3: f_pal_color+=58; break;
     case  4: f_pal_color+=64; break;
     case  5: f_pal_color+=70; break;
     case  6: f_pal_color+=76; break;
     case  7: f_pal_color+=82; break;
     case  8: f_pal_color+=160; break;
     case  9: f_pal_color+=166; break;
     case 10: f_pal_color+=172; break;
     case 11: f_pal_color+=178; break;
     case 12: f_pal_color+=184; break;
     case 13: f_pal_color+=190; break;
     default: f_pal_color=-1; break;
    }
   } else {
    f_pal_color=fp_col-12;
    switch ( fp_row ) { // Right Column
     case  2: f_pal_color+=88; break;
     case  3: f_pal_color+=94; break;
     case  4: f_pal_color+=100; break;
     case  5: f_pal_color+=106; break;
     case  6: f_pal_color+=112; break;
     case  7: f_pal_color+=118; break;
     case  8: f_pal_color+=196; break;
     case  9: f_pal_color+=202; break;
     case 10: f_pal_color+=208; break;
     case 11: f_pal_color+=214; break;
     case 12: f_pal_color+=220; break;
     case 13: f_pal_color+=226; break;
     default: f_pal_color=-1; break;
    }
   }
  }
  if ( f_pal_color &gt;= 0 and f_pal_color &lt; 256 ) {
   if ( keyboard_check(vk_alt) ) {
   } else if ( keyboard_check(vk_control) ) {
     if ( mouse_check_button_pressed(mb_left) ) {
      if ( ramp_fore &gt; 0 ) ramp_fore--;
     }
     if ( mouse_check_button_pressed(mb_right) ) {
      if ( ramp_back &gt; 0 ) ramp_back--;
     }
   } else if ( keyboard_check(vk_shift) ) {
     if ( mouse_check_button_pressed(mb_left) ) {
      color_ramp_fore[ramp_fore]=f_pal_color;
      ramp_fore++;
     }
     if ( mouse_check_button_pressed(mb_right) ) {
      color_ramp_back[ramp_back]=f_pal_color;
      ramp_back++;
     }
   } else {
    if ( mouse_left ) fansifore=f_pal_color;
    if ( mouse_right ) fansiback=f_pal_color;
   }
  }
 } else {
 }
}

if ( WITHIN(mouse_x,mouse_y,room_width-32,room_height-128,room_width,room_height-64) )
 if ( mouse_check_button_pressed(mb_any) ) {
 show_fansi_chars=false;
 show_fansi_pal=!show_fansi_pal;
}

draw_set_blend_mode(bm_normal);
draw_set_color(global.fansi_color[fansifore]);
draw_rectangle(room_width-32,room_height-64-64,room_width,room_height-64-32,false);

draw_set_color(global.fansi_color[fansiback]);
draw_rectangle(room_width-32,room_height-64-32,room_width,room_height-64,false);

cell_string="";

// Brush actions
if ( !using_menu and mouse_cell_x &gt;= 0 and mouse_cell_y &gt;= 0 ) {
 mouse_cell=mouse_cell_x+mouse_cell_y*workw;
 
 wasFore=_fore[mouse_cell];
 wasBack=_back[mouse_cell];
 wasChar=_char[mouse_cell];
 
 if ( last_mouse_cell_x != mouse_cell_x or last_mouse_cell_y != mouse_cell_y ) {
  last_mouse_cell_x=mouse_cell_x;
  last_mouse_cell_y=mouse_cell_y;
  if ( ramp_fore &gt; 0 and mode_color_ramp ) {
   if ( draw_ramp_fore &gt;= ramp_fore ) draw_ramp_fore = 0;
   fansifore=color_ramp_fore[draw_ramp_fore];
   draw_ramp_fore++;
  }
  if ( ramp_back &gt; 0 and mode_color_ramp ) {
   if ( draw_ramp_back &gt;= ramp_back ) draw_ramp_back = 0;
   fansiback=color_ramp_back[draw_ramp_back];
   draw_ramp_back++;
  } 
 }
 
 if ( mode_pencil ) {
  if ( mouse_any ) {
   _fore[mouse_cell]=fansifore;
   _back[mouse_cell]=fansiback;
   _char[mouse_cell]=fansichar;
  }
 } else if ( mode_hb_brush ) {
  if ( top_half ) {
   if ( mouse_left ) {
    _back[mouse_cell]=fansifore;
    if( _char[mouse_cell] != 220) _fore[mouse_cell]=wasBack;
    _char[mouse_cell]=220;
   } else if ( mouse_right ){
    _back[mouse_cell]=fansiback;
    if( _char[mouse_cell] != 220) _fore[mouse_cell]=wasBack;
    _char[mouse_cell]=220;
   }
  } else { // bottom half
   if ( mouse_left ) {
    _fore[mouse_cell]=fansifore;
    if( _char[mouse_cell] != 220) _back[mouse_cell]=wasFore;
    _char[mouse_cell]=220;
   } else if ( mouse_right ) {
    _fore[mouse_cell]=fansiback;
    if( _char[mouse_cell] != 220) _back[mouse_cell]=wasFore;
    _char[mouse_cell]=220;
   }
  }
 }
 
 cell_string="    Chr("
  +int(_char[mouse_cell])
  +") Fore: "
  +int(_fore[mouse_cell])
  +" Back: "
  +int(_back[mouse_cell]);
 
}/// Brush actions

cw=24;
cy=0;
cy2=cw;
for ( i=0; i&lt;ramp_fore; i++ ) {
 cx=room_width-(i+1)*cw;
 cx2=room_width-(i)*cw;
 draw_set_color(global.fansi_color[color_ramp_fore[i]]);
 draw_rectangle(cx,cy,cx2,cy2,false);
 if ( WITHIN(mouse_x,mouse_y,cx,cy,cx2,cy2) ) {
  if ( mouse_left ) {
   fansifore=color_ramp_fore[i];
  }
  if ( mouse_right ) {
   fansiback=color_ramp_fore[i];
  }
 }
}
cy=cw;
cy2=cw*2;
for ( i=0; i&lt;ramp_back; i++ ) {
 cx=room_width-(i+1)*cw;
 cx2=room_width-(i)*cw;
 draw_set_color(global.fansi_color[color_ramp_back[i]]);
 draw_rectangle(cx,cy,cx2,cy2,false);
 if ( WITHIN(mouse_x,mouse_y,cx,cy,cx2,cy2) ) {
  if ( mouse_left ) {
   fansifore=color_ramp_back[i];
  }
  if ( mouse_right ) {
   fansiback=color_ramp_back[i];
  }
 }
}


draw_set_color(c_white);
draw_set_font(term7);
draw_text(192,6,
 "Zoom: "+float(zoom)+" ("+int(cell_w)+"x"+int(cell_h)+")"+
 " Pan: "+int(_xofs)+","+int(_yofs)+
 "    Canvas: "+int(canvas_w)+"x"+int(canvas_h)+" @ "+int(canvas_x)+","+int(canvas_y)
  +int(mouse_cell_x-canvas_x)+","+int(mouse_cell_y-canvas_y)+
 "    Pen: "+int(mouse_cell_x)+","+int(mouse_cell_y)+" F:"+int(fansifore)+" B:"+int(fansiback)+
 "#Mode: "+mode_string+"     "+cell_string
);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.draw_ui=true;
visible=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
