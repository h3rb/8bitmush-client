<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.controlpad=id;

global.dont_use_stick=true;

x=room_width-sprite_get_width(s_controller)-8;
y=room_height-sprite_get_height(s_controller)-8;

visible=false;

mx=0;
my=0;
pressed=false;

last_sent=0;

xofs=79;
yofs=104;

pad_radius=40;
pad_x=0;
pad_y=0;

rest_radius=10;//16;

stick_radius=14;
stick_x=0;
stick_y=0;
stick_active=-1;  // some wierd state, -1 being 'inactive', 0-4 meaning up to 4 sticks??
stick_angle=0;

send="";

use_debugmode_circles=false;

change_timer = 0; //To make sure you can't spam click

direct=0;
was_direct=0;
n_way = 1;
 //1 = 4 Way Direction, 2 = 8 Way Direction. SIMPLES...

// Viewport??
a =0;// view_xview[0]; //Left side of the screen
b =0;// view_yview[0]; //Top side of the screen
c =room_width;// view_xview[0] + view_wview[0]; //Right side of the screen
d =room_height;// view_yview[0] + view_hview[0]; //Bottom side of the screen

// Buttons A,B
buttonw=sprite_get_width(s_button_up);
buttonh=sprite_get_height(s_button_up);

button_ax=324;
button_ay=80;
button_ax2=button_ax+buttonw;
button_ay2=button_ay+buttonh;
button_a=false;
was_button_a=false;

button_bx=384;
button_by=80;
button_bx2=button_bx+buttonw;
button_by2=button_by+buttonh;
button_b=false;
was_button_b=false;

// Buttons Select, Start
ssw=48;
ssh=16;

selx=168;
sely=104;
selx2=selx+ssw;
sely2=sely+ssh;
select_pressed=false;
was_selected_pressed=false;

stax=240;
stay=104;
stax2=stax+ssw;
stay2=stay+ssh;
start_pressed=false;
was_start_pressed=false;

// Mode Selection Slider (controls n_way)

wayx=210;
wayy=17;
wayw=35;
wayh=13;
wayx2=wayx+wayw;
wayy2=wayy+wayh;
slider_pressed=false;
was_slider_pressed=false;

// Real gamepad detection
global.gpad_supported = gamepad_is_supported();
if ( global.gpad_supported ) {
 global.gamepads = gamepad_get_device_count();
 for (var i = 0; i &lt; global.gamepads; i++;) {
  if gamepad_is_connected(i) {
   global.gpad[i] = true;
   global.gpad_description[i]=gamepad_get_description(i);
  } else global.gpad[i] = false;
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( visible ) {

mx = (device_mouse_x(0)/global.width)*room_width;
my = (device_mouse_y(0)/global.height)*room_height;
pressed=mouse_check_button(mb_any);

var dp;

//depth = -room_height;
change_timer = max(0,change_timer - 1);

pad_x = x+xofs;//a + (view_wview[0] div 2); //Modify x and y to where ever on the screen.
pad_y = y+yofs;//b + (view_hview[0] div 2);

stick_x = pad_x; //This is the stick co-ordinates from the center of the dot
stick_y = pad_y;

//---Circle Pad input---//
for(dp = 0;dp &lt;= 4;dp = dp + 1)
{
    if (Device_Input_Script(2,dp,pad_x,pad_y,pad_radius)
     &amp;&amp; !(stick_active &gt;= 0 &amp;&amp; stick_active &lt;= 4)
     &amp;&amp; change_timer &lt; 1) //Activates the Stick
    {
        stick_active = dp;
        change_timer = 5;
        break;
    }
}

if (stick_active &gt;= 0 &amp;&amp; stick_active &lt;= 4)
{
    if (Device_Input_Script(7,stick_active,0,0,0)) //Deactivates the Stick
        stick_active = -1;
}

if (stick_active &gt;= 0 &amp;&amp; stick_active &lt;= 4) {
 stick_x = Device_Input_Script(4,stick_active,pad_x,pad_y,pad_radius - stick_radius);
 stick_y = Device_Input_Script(5,stick_active,pad_x,pad_y,pad_radius - stick_radius);
 last_sent++;
}

//---Circle Pad Input---//

// Buttons A, B

was_button_a=button_a;
if ( WITHIN(mx,my,x+button_ax,y+button_ay,x+button_ax2,y+button_ay2) ) {
 if ( pressed ) {
  button_a=true;
 } else button_a=false;
} else button_a=false;

if ( not was_button_a and button_a ) {
 audio_play_sound(sfx_joystick_button,100,0);
 network_dump("A");
}

was_button_b=button_b;
if ( WITHIN(mx,my,x+button_bx,y+button_by,x+button_bx2,y+button_by2) ) {
 if ( pressed ) {
  button_b=true;
 } else button_b=false;
} else button_b=false;

if ( not was_button_b and button_b ) {
 audio_play_sound(sfx_joystick_button,100,0);
 network_dump("B");
}

// Buttons Select, Start

was_select_pressed=select_pressed;
if ( WITHIN(mx,my,x+selx,y+sely,x+selx2,y+sely2) ) {
 if ( pressed ) {
  select_pressed=true;
 } else select_pressed=false;
} else select_pressed=false;

if ( not was_select_pressed and select_pressed ) {
 network_dump("SELECT");
}

was_start_pressed=start_pressed;
if ( WITHIN(mx,my,x+stax,y+stay,x+stax2,y+stay2) ) {
 if ( pressed ) {
  start_pressed=true;
 } else start_pressed=false;
} else start_pressed=false;

if ( not was_start_pressed and start_pressed ) {
 network_dump("START");
}

// N-Way Slider
was_slider_pressed=slider_pressed;
if ( WITHIN(mx,my,x+wayx-8,y+wayy,x+wayx2+8,y+wayy2) ) {
 if ( pressed ) {
  slider_pressed=true;
 } else slider_pressed=false;
} else slider_pressed=false;

if ( not was_slider_pressed and slider_pressed ) {
 audio_play_sound(sfx_key_locked,100,0);
 if ( n_way == 2 ) n_way=1;
 else n_way=2;
}

// Real gamepad check
if ( global.gpad_supported ) if ( gamepad_is_connected(0) ) {
 if ( gamepad_button_check_pressed(0, gp_face1) ) network_dump("A");
 if ( gamepad_button_check_pressed(0, gp_face2) ) network_dump("B");
 if ( gamepad_button_check_pressed(0, gp_face3) ) network_dump("A");
 if ( gamepad_button_check_pressed(0, gp_face4) ) network_dump("B");
 if ( gamepad_button_check_pressed(0, gp_start) ) network_dump("START");
 if ( gamepad_button_check_pressed(0, gp_select) ) network_dump("SELECT");
 if ( gamepad_button_check_pressed(0, gp_shoulderl) ) network_dump("4");
 if ( gamepad_button_check_pressed(0, gp_shoulderr) ) network_dump("6");
 if ( gamepad_button_check_pressed(0, gp_shoulderlb) ) network_dump("4");
 if ( gamepad_button_check_pressed(0, gp_shoulderrb) ) network_dump("6");
 if ( gamepad_button_check_pressed(0, gp_padu) ) network_dump("8");
 if ( gamepad_button_check_pressed(0, gp_padd) ) network_dump("2");
 if ( gamepad_button_check_pressed(0, gp_padl) ) network_dump("4");
 if ( gamepad_button_check_pressed(0, gp_padr) ) network_dump("6");
 var horiz= gamepad_axis_value(0, gp_axislh);
 var verti= gamepad_axis_value(0, gp_axislv);
 if ( n_way == 1 ) { // 4 directions
  if ( horiz &gt; 0.5 ) {
   network_dump("6");
  } else if ( horiz &lt; -0.5 ) {
   network_dump("4");
  }
  if ( verti &gt; 0.5 ) {
   network_dump("8");
  } else if ( verti &lt; -0.5 ) {
   network_dump("2");
  }
 } else {
  if ( horiz &gt; 0.5 ) { // right
   if ( verti &gt; 0.5 ) { // up
    network_dump("9");
   } else if ( verti &lt; 0.5 ) {
    network_dump("3");
   } else
    network_dump("6");
  } else if ( horiz &lt; -0.5 ) { // left
   if ( verti &gt; 0.5 ) {
    network_dump("7");
   } else if ( verti &lt; 0.5 ) {
    network_dump("1");
   } else
    network_dump("4");
  } else {
   if ( verti &gt; 0.5 ) {
    network_dump("8");
   } else if ( verti &lt; 0.5 ) {
    network_dump("2");
   }
  }
 }
 horiz= gamepad_axis_value(0, gp_axisrh);
 verti= gamepad_axis_value(0, gp_axisrv);
 if ( n_way == 1 ) { // 4 directions
  if ( horiz &gt; 0.5 ) {
   network_dump("6");
  } else if ( horiz &lt; -0.5 ) {
   network_dump("4");
  }
  if ( verti &gt; 0.5 ) {
   network_dump("8");
  } else if ( verti &lt; -0.5 ) {
   network_dump("2");
  }
 } else {
  if ( horiz &gt; 0.5 ) { // right
   if ( verti &gt; 0.5 ) { // up
    network_dump("9");
   } else if ( verti &lt; 0.5 ) {
    network_dump("3");
   } else
    network_dump("6");
  } else if ( horiz &lt; -0.5 ) { // left
   if ( verti &gt; 0.5 ) {
    network_dump("7");
   } else if ( verti &lt; 0.5 ) {
    network_dump("1");
   } else
    network_dump("4");
  } else {
   if ( verti &gt; 0.5 ) {
    network_dump("8");
   } else if ( verti &lt; 0.5 ) {
    network_dump("2");
   }
  }
 } 
}

}//visibility check

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode(bm_normal);
draw_sprite_ext(s_controller,0,x,y,1,1,0,c_white,1);

// Mode selection slider

if ( n_way == 1 ) draw_sprite_rectangle(s_slider_a,0,x+wayx,y+wayy,x+wayx2,y+wayy2, 0,c_white,1);
else draw_sprite_rectangle(s_slider_b,0,x+wayx,y+wayy,x+wayx2,y+wayy2, 0,c_white,1);
draw_sprite_ext(s_fansi_font,52,x+wayx-8,y+wayy,1,1,0,c_black,1);
draw_sprite_ext(s_fansi_font,56,x+wayx2,y+wayy,1,1,0,c_black,1);

// Buttons A,B
var bs;
if ( button_a ) bs=s_button_down;
else bs=s_button_up;
draw_sprite_ext( bs, 0, x+button_ax, y+button_ay, 1,1,0,c_white,1);
bs=s_button_up;
if ( button_b ) bs=s_button_down;
else bs=s_button_up;
draw_sprite_ext( bs, 0, x+button_bx, y+button_by, 1,1,0,c_white,1);

// Buttons Select, Start
draw_set_color(c_aqua);
draw_set_alpha(1);
if ( select_pressed ) draw_rectangle(x+selx,y+sely,x+selx2,y+sely2,false);
if ( start_pressed ) draw_rectangle(x+stax,y+stay,x+stax2,y+stay2,false);

draw_set_color(c_white);

// Debug
if ( use_debugmode_circles ) {
 draw_sprite(Circle_Pad_Spr,0,pad_x,pad_y);
 draw_sprite(Circle_Stick_Spr,0,stick_x,stick_y);
}

was_direct=direct;

send="";

//Determine the action of the stick/pad
if ( point_distance(pad_x,pad_y,stick_x,stick_y) &lt; rest_radius ) {
 direct=0;
 last_sent++;
} else if (stick_active &gt;= 0
 &amp;&amp; stick_active &lt;= 4) {
 stick_angle = Angle_Script(1,pad_x,pad_y,stick_x,stick_y); //This retrieves the degree angle fro mthe pad to the mouse &lt;-A MUST
// direct = 1 + (5 * (n_way == 2)); //Defaulting to DOWN
 if (n_way == 1) {//This is if you need 4 Way movement    
  direct = Angle_Script(2,stick_angle,0,0,0); //This will give you the N Way Movement. THIS IS WHAT DECIDES THE MOVEMENT DIRECTION
  switch ( direct ) {
   case 1: draw_sprite_ext(s_direction_indicator,0,x+72+11, y+131+6,  1,1,180,c_white,1); send=("2"); break; // str = "DOWN";
   case 2: draw_sprite_ext(s_direction_indicator,0,x+37, y+97+11,     1,1, 90,c_white,1); send=("4"); break; // str = "LEFT";
   case 3: draw_sprite_ext(s_direction_indicator,0,x+72, y+68,        1,1,  0,c_white,1); send=("8"); break; // str = "UP";
   case 4: draw_sprite_ext(s_direction_indicator,0,x+110+6,y+98-1,    1,1,-90,c_white,1); send=("6"); break; // str = "RIGHT";
  } 
 } else if (n_way == 2) { //This is if you need 8 Way movement
  direct = Angle_Script(5,stick_angle,0,0,0);  //This will give you the N Way Movement. THIS IS WHAT DECIDES THE MOVEMENT DIRECTION        
  switch ( direct ) {
   case 1: draw_sprite_ext(s_direction_indicator,0,x+72, y+68,       1,1,  0,c_white,1);
           draw_sprite_ext(s_direction_indicator,0,x+110+6,y+98-1,   1,1,-90,c_white,1); send=("9");
    break; // UP-RIGHT
   case 3: draw_sprite_ext(s_direction_indicator,0,x+72, y+68,       1,1,  0,c_white,1);
           draw_sprite_ext(s_direction_indicator,0,x+37, y+97+11,    1,1, 90,c_white,1); send=("7");
    break; // UP-LEFT
   case 5: draw_sprite_ext(s_direction_indicator,0,x+72+11, y+131+6, 1,1,180,c_white,1);
           draw_sprite_ext(s_direction_indicator,0,x+37, y+97+11,    1,1, 90,c_white,1); send=("1");
    break; // DOWN-LEFT
   case 7: draw_sprite_ext(s_direction_indicator,0,x+72+11, y+131+6, 1,1,180,c_white,1);
           draw_sprite_ext(s_direction_indicator,0,x+110+6,y+98-1,   1,1,-90,c_white,1); send=("3");
    break; // DOWN-RIGHT
   case 2: draw_sprite_ext(s_direction_indicator,0,x+72, y+68,       1,1,  0,c_white,1); send=("8"); break; // str = "UP";
   case 4: draw_sprite_ext(s_direction_indicator,0,x+37, y+97+11,    1,1, 90,c_white,1); send=("4"); break; // str = "LEFT";
   case 6: draw_sprite_ext(s_direction_indicator,0,x+72+11, y+131+6, 1,1,180,c_white,1); send=("2"); break; // str = "DOWN";
   case 8: draw_sprite_ext(s_direction_indicator,0,x+110+6,y+98-1,   1,1,-90,c_white,1); send=("6"); break; // str = "RIGHT";
  }
 }
 last_sent++;
 if ( string_length(send) &gt; 0 and last_sent &gt; room_speed ) {
  last_sent=0;
  network_dump(send);
 }
} else {
 direct=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>226,226</point>
  </PhysicsShapePoints>
</object>
