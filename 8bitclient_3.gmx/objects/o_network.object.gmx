<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.network=id;
socket = network_create_socket( network_socket_tcp );
result = network_connect_raw( socket, "8bit.fansi.org", 4201 );
byte = buffer_sizeof(buffer_u8);
lines=0;
character=0;
in_buffer="";
in[0]=0;
lastread=0;
reading=0;
time_since_last_read=0;
global.incomplete_ansi_code=false;
global.incomplete_ansi_code_content="";
global.output_queue="";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time_since_last_read++;
//if ( time_since_last_read &gt; 1+room_speed/10 and reading &gt; 0 ) {
if ( reading &gt; 0 ) {
 terminal_process_input();
 // Reset our networking reader.
 reading=0;
}

var output_total = string_length(global.output_queue);
if ( output_total &gt; 0 ) {
 var output_length = string_pos(chr(13)+"", global.output_queue );
 global.network_progress=output_length/output_total;
 //show_message(int(output_total)+" =&gt; "+int(output_length) );
 if ( output_length &gt; 0 ) {
  var output_segment = string_copy(global.output_queue,1,output_length);
  global.output_queue = string_copy(global.output_queue,output_length + 1,output_total);
  var i,c;
  var outgoing = buffer_create( 256, buffer_grow, 1 );
  buffer_seek( outgoing, buffer_seek_start, 0 );
  for ( i=0; i&lt;output_length; i++ ) {
   c = string_char_at(output_segment,i+1);
   if ( ord(c) == 10 ) { // ignore
   } else if ( ord(c) == 13 ) {
    buffer_write( outgoing, buffer_u8, 10 );
    buffer_write( outgoing, buffer_u8, 13 );
   } else {
    buffer_write( outgoing, buffer_u8, ord(c) );
   }
  }
  network_send_raw(
   global.network.socket, outgoing,
   buffer_get_size(outgoing)
  );
  buffer_delete(outgoing);
 }
} else global.network_progress=1.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time_since_last_read=0;

var event = ds_map_find_value(async_load, "id");
if ( socket == event ) {
  var t=ds_map_find_value(async_load, "type");
  if ( t == network_type_connect ) {
  } else if ( t == network_type_disconnect ) {
   room_goto(title);
  } else if ( t == network_type_data ) {
   var incoming = ds_map_find_value(async_load, "buffer"); 
   var size = buffer_get_size(incoming);
   var i=0;
   global.network.lastread=0;
   global.network.in_buffer="";
   for ( i=0; i&lt;size; i++ ) {
    var byte=buffer_read(incoming,buffer_u8);
    switch ( byte ) {
     case 10: // linefeed (increment lines)
       lines++;
       in[reading]=10;
       reading++;
      break;
     case 13: // carriage return (combine with linefeed)
       in[reading]=13;
       reading++;
      break;
     case 255: // IAC
       break;
     default:
       global.network.in_buffer+=chr(byte);    
       in[reading]=byte;
       reading++;
      break;
    }
   }
  global.network.lastread=reading;
 }
}
//  show_message(in);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
