<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.active_window=id;

global.show_keyboard=false;
global.keyboard_x=8;
global.keyboard_y=8;

global.terminal=id;

global.default_fore_color=7; // Default: gray
global.default_back_color=0; // Default: black
global.fore_color=global.default_fore_color;
global.back_color=global.default_back_color;

draw_ui=true;
global.draw_ui=true;

blinkInstant=0.0;

idler=0;

clickDelay=0;

global.cursor=chr(22);

local_echo=false;

sidebar_is_open=false;
use_term_font=true;
double_font=false;
resize_font=true;
fscale=1.45;

scroll=0;

cursor="";
cursorRate=1;
cursorDelay=cursorRate;

// Terminal writing location
col=0;
row=0;

maxwidth=81;
maxrows=350;

//oldlen=0;
//len=0;
//maxcharacters=65535;
input="";
input_font=term10;
local_input="";

// Create the "terminal screen array" that stores fully colorized FANSI, limit ~400 lines
var i,j;
for ( j=0; j&lt;maxrows; j++ ) {
 for ( i=0; i&lt;maxwidth; i++ ) {
  character[i,j]=ord(" ");
  fore[i,j]=7;
  back[i,j]=0;
  code[i,j]="";
  _slow[i,j]=false;
  _fast[i,j]=false;
  _italic[i,j]=false;
  _strikethru[i,j]=false;
  _fraktur[i,j]=false;
  _underline[i,j]=false;
  _double[i,j]=false;  
 }
}

// init the ansi_code values

for ( i=0; i&lt;10; i++ ) {
 global.ansi_values[i]=0;
}

// ANSI / Terminal states
inverse=false;
bold=false;
underline=false;
double_ul=false;
italic=false;
script=false;
fraktur=false;
blink_slow=false;
blink_fast=false;
strikethru=false;

global.music_in=""; // Used by ansi music snarfer
global.show_note_when_music_plays=false;
// Sometimes when the async event is called, music gets truncated.  We continue collecting music until we encounter &lt;14&gt;?  Right now no.
continue_collecting_music=false;  

// Macro feature
macro_recording=false;

// Default macros
terminal_reset_macros();
macro_is_selected=-1;
up_is_selected=false;
down_is_selected=false;

// was used to test wrapping limit
//macro[0]="@chat public=asbcoduchhdgkljhsakjhasdkjhkjdashdkjsahdsakjdhsdkjashdsakjdhsakdjhsadkjhasdlksal;a;d asjhdaskjdhsa;kdjh asdkjh as;";

backspace_repeating=false;
backspace_pressed=-1;
backspace_delay=room_speed/2;
backspace_interval=room_speed/10;

prior_walkback=-1;
prior_inputs=0;
prior_input[0]="";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blinkInstant+=1/room_speed;

if ( clickDelay &gt; 0 ) clickDelay-=1/room_speed;
// oldlen=string_length(input);
 local_input+=keyboard_string;
 keyboard_string="";
// if ( oldlen != len ) audio_play_sound(sfx_keypress,1,0);
// len=oldlen;
// if (string_length(input) &gt; maxcharacters) {
//  value = string_copy(value, 1, maxcharacters);
//  keyboard_string=value;
// }

// "auto-idle"
idler++;
if ( idler &gt; room_speed*5 ) {
 var temp=local_echo;
 local_echo=false;
 network_dump("IDLE");
 local_echo=temp;
 idler=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="46">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var len=string_length(local_input);
local_input=string_delete(local_input,len,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( backspace_pressed &gt;= 0 ) {
 backspace_pressed++;
 if ( backspace_repeating ) {
  if (backspace_pressed &gt; backspace_interval) {
   var len=string_length(local_input);
   local_input=string_delete(local_input,len,1);
   backspace_pressed=0;
  }
 } else if ( backspace_pressed &gt; backspace_delay ) {
  var len=string_length(local_input);
  local_input=string_delete(local_input,len,1);
  backspace_pressed=0;
  backspace_repeating=true;
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( draw_ui and global.draw_ui ){////

var hovering;

draw_set_blend_mode(bm_normal);

var mx = (device_mouse_x(0)/global.width)*room_width;
var my = (device_mouse_y(0)/global.height)*room_height;

var clicking=mouse_check_button(mb_any) and clickDelay &lt;= 0;

if ( mouse_wheel_up() ) {
 scroll-=1;
} else if ( mouse_wheel_down() and scroll &lt; 10 ) {
 scroll+=1;
}

if ( keyboard_check_pressed(vk_pageup) ) {
 scroll-=10;
} else if ( keyboard_check_pressed(vk_pagedown) and scroll &lt; 10 ) {
 scroll+=10;
}

if ( keyboard_check_pressed(vk_end) ) {
 scroll=0;
} else if ( keyboard_check_pressed(vk_home) ) {
 scroll=-(global.terminal.maxrows-1);
}

var mcol=0;
var mrow=0;
var c=" ";

var fw=8;
var fh=12;
var font;
if ( use_term_font ) font=s_term_font; // s_fansi
else font=s_fansi_font;
var text_scale=1;

if ( not sidebar_is_open ) {
 if ( use_term_font ) {
  if ( double_font ) {
   fw *= 2;
   fh *= 2;
   font=s_term_font_big; // s_fansi_big
   text_scale=1.0;
  } else if ( resize_font ) {
   fw *= fscale;
   fh *= fscale;
   font=s_term_font;
   text_scale=fscale;
  }
 } else {
  if ( double_font ) {
   fw *= 2;
   fh *= 2;
   font=s_fansi_font_big;
   text_scale=1.0;
  } else if ( resize_font ) {
   fw *= fscale;
   fh *= fscale;
   font=s_fansi_font;
   text_scale=fscale;
  }
 }
}

var display_rows=(room_height*0.8)/fh-1;
var srow=row-display_rows+scroll;
if ( srow &lt; 0 ) srow=0;
var i,j;
draw_set_font(fractur12);
for ( j=0; j&lt;display_rows; j++ ) {
 for ( i=0; i&lt;maxwidth; i++ ) {
  if ( j+srow &lt; maxrows ) {
   var p=i;
   var q=j+srow;
   var a=1;
   if ( global.terminal._slow[p,q] ) a=sin((blinkInstant/8)*pi);
   else
   if ( global.terminal._fast[p,q] ) a=cos((blinkInstant/4)*pi);
   var m=i * fw;
   var n=j * fh;
   var x1=m;
   var y1=n;
   var x2=m+fw-1;
   var y2=n+fh-1;
   draw_set_color(global.fansi_color[back[p,q]]);
   draw_rectangle(m,n,m+fw,n+fh,false);
   if ( WITHIN(mx,my,x1,y1,x2,y2) ) {
    draw_set_color(c_blue);
    mcol=i;
    mrow=j;
    c=chr(character[p,q]);
    draw_rectangle(m,n,m+fw-1,n+fh-1,true);
   } // else draw_set_color(make_color_rgb(32,32,32));
   if ( global.terminal.fraktur[p,q] )  {
    draw_set_color(global.fansi_color[fore[p,q]]);
    draw_text(m,n,chr(character[p,q]));
   } else { // Use active terminal font
    draw_sprite_ext(
     font,character[i,j+srow],
     m,n,text_scale,text_scale,0,global.fansi_color[fore[p,q]],a
    );
   }
   if ( global.terminal._underline[p,q] ) {
    draw_sprite_ext(
     font,95, // underscore
     m,n,text_scale,text_scale,0,global.fansi_color[fore[p,q]],a
    );
   }
   if ( global.terminal.strikethru[p,q] ) {
    draw_sprite_ext(
     font,196, // horiz-line
     m,n,text_scale,text_scale,0,global.fansi_color[fore[p,q]],a
    );
   }
  }
 }
}
 
render_scrollbar();
 
//closed sidebar
if ( not sidebar_is_open ) {
 var sbx=room_width-64-16;
 var sby=0;
 var sbx2=room_width;
 var sby2=room_height*0.8;
 /*
 if ( WITHIN(mx,my,sbx,sby,sbx2,sby2) ) {
  if ( mouse_check_button(mb_any) ) {
   draw_set_color(c_aqua);
   draw_rectangle(sbx,sby,sbx2,sby2,false);
   if ( my &lt; 64 and clickDelay &lt;= 0.0 ) {
    clickDelay=0.5;
    sidebar_is_open=true;
   }
  } else {
   draw_set_color(c_blue);
   draw_rectangle(sbx,sby,sbx2,sby2,false);
  }
 } else*/
 if ( WITHIN(mx,my,sbx,sby,sbx2,sby2) ) {
   if ( mouse_check_button(mb_any) ) {
    if ( my &lt; 64 and clickDelay &lt;= 0.0 ) {
     clickDelay=0.5;
     sidebar_is_open=true;
     draw_set_color(c_aqua);
     draw_rectangle(sbx,sby,sbx2,sby2,false);
    }
   }
  } else {
  draw_set_color(make_color_rgb(0,12,32));
  draw_rectangle(sbx,sby,sbx2,sby2,false);
 }
 draw_set_color(c_dkgray);
 draw_rectangle( sbx+2, sby+2, sbx2-2, sby2-2, true );
 draw_sprite_ext( s_fansi_font_big, 27, sbx+16, sby+16, 1, 1, 0, c_white, 1 );
 
 hovering=icon_button64( sbx+8, sby+64+4, s_icon_compass, mx, my );
 if ( clicking and hovering ) {
  clickDelay=0.3;
 }
 
 hovering=icon_button64( sbx+8, sby+(64+4)*2, s_icon_controller, mx, my );
 if ( clicking and hovering ) {
  clickDelay=0.3;
  global.controlpad.visible=not global.controlpad.visible;
 }

 hovering=icon_button64( sbx+8, sby+(64+4)*3, s_icon_keyboard, mx, my );
 if ( clicking and hovering ) {
  clickDelay=0.3;
  global.show_keyboard=not global.show_keyboard;
 }
 
 hovering=icon_button64( sbx+8, sby+(64+4)*4, s_icon_piano, mx, my );
 if ( clicking and hovering ) {
  clickDelay=0.3;
 } 

 hovering=icon_button64( sbx+8, sby+(64+4)*5, s_icon_who, mx, my );
 if ( clicking and hovering ) {
  clickDelay=0.3;
  var temp=local_input;
  switch ( real(int(random(7))) ) {
    case 0: local_input="WHO"; break;
    case 1: local_input="face"; break;
    case 2: local_input="who2"; break;
    case 3: local_input="who3"; break;
    case 4: local_input="who4"; break;
    case 5: local_input="who5"; break;
   default: local_input="who"; break;
  }
  input=local_input+chr(13);
  network_send();
  local_input=temp;
 } 
 
 hovering=icon_button64( sbx+8, sby+(64+4)*6, s_icon_powerglove, mx, my );
 if ( clicking and hovering ) {
  clickDelay=0.3;
  global.powerglove.visible=not global.powerglove.visible;
  if ( global.powerglove.visible ) global.controlpad.visible=false;
 }

 hovering=icon_button64( sbx+8, sby+(64+4)*7, s_icon_painter, mx, my );
 if ( clicking and hovering ) {
  clickDelay=0.3;
  global.painter.visible=true;
  global.draw_ui=false;
  global.controlpad.visible=false;
 } 

 hovering=icon_button64( sbx+8, sby+(64+4)*8, s_icon_mushcode, mx, my );
 if ( clicking and hovering ) {
  clickDelay=0.3;
 } 
 
  
} else { // Sidebar is open
 var sbx=room_width-64*5;
 var sby=0;
 var sbx2=room_width;
 var sby2=room_height*0.8;
 if ( WITHIN(mx,my,sbx,sby,sbx2,sby2) ) {
  if ( mouse_check_button(mb_any) and clickDelay &lt;= 0.0 ) {
   if ( my &lt; 64 and mx &lt; sbx+64 and clickDelay &lt;= 0.0 ) {
    clickDelay=0.5;
    sidebar_is_open=false;
   }
  }
 }
 
 draw_set_color(make_color_rgb(0,12,32));
 draw_rectangle(sbx,sby,sbx2,sby2,false);

 hovering=icon_button64( sbx+64+8, sby+8, s_icon_settings, mx, my );
 if ( clicking and hovering ) {
  clickDelay=0.3;
 }

 hovering=icon_button64( sbx+64+8+64+8, sby+8, s_icon_record, mx, my );
 if ( macro_recording ) {
  draw_sprite_ext(s_glow_red,0, sbx+64+8+64+8-32+64, sby+8-32+64, 1, 1, string_length(local_input), c_white, 1);
 }
 if ( clicking and hovering ) {
  clickDelay=0.3;
  if ( macro_recording ) { // Record a new macro
   var spaceless=string_replace_all(local_input," ","");
   if ( string_length(spaceless) &gt; 0 ) { // Overwrite
    if ( macro_is_selected != -1 ) { // If selected
     macro[macro_is_selected]=local_input;
    }
   } else { // Delete Macro
   }
   // Delete "&lt;new macro&gt;"
   if ( global.terminal.macro[global.terminal.macros-1] != "&lt;new macro&gt;" ) {
    global.terminal.macros--;
   }
   macro_recording=false;
   macro_is_selected=-1;
  } else {
   macro_recording=true;
   if ( global.terminal.macro[global.terminal.macros-1] != "&lt;new macro&gt;" ) {
    global.terminal.macro[global.terminal.macros]="&lt;new macro&gt;";
    global.terminal.macro_send[global.terminal.macros]=false;
    global.terminal.macros++;
   }
  }
 }  
 
 if ( macro_recording and up_is_selected ) {
  hovering=icon_button64( sbx+(64+8)*3, sby+8, s_icon_up_selected, mx, my );  
 } else {
  hovering=icon_button64( sbx+(64+8)*3, sby+8, s_icon_up, mx, my );
 } 
 if ( clicking and hovering ) {
  clickDelay=0.3;
  if ( not macro_recording ) {
   if ( show_macro &gt; 0 ) show_macro--;
  } else {
   if ( up_is_selected ) {
    up_is_selected=false;
    down_is_selected=false;
   } else {
    up_is_selected=true;
    down_is_selected=false;
   }
  }
 } 

 var macros_on_screen=real(int((room_height*0.8)/(48)))-2;

 if ( macro_recording and down_is_selected ) {
  hovering=icon_button64( sbx+(64+8)*3+48, sby+8, s_icon_down_selected, mx, my );
 } else {
  hovering=icon_button64( sbx+(64+8)*3+48, sby+8, s_icon_down, mx, my );
 }
 if ( clicking and hovering ) {
  clickDelay=0.3;
  if ( not macro_recording ) {
   if ( show_macro &lt; macros-macros_on_screen+2 ) show_macro++;
  } else {
   if ( down_is_selected ) {
    up_is_selected=false;
    down_is_selected=false;
   } else {
    up_is_selected=false;
    down_is_selected=true;
   }
  }
 } 
  
 var j=0,i;
 for ( i=show_macro; i&lt;macros and j&lt;macros_on_screen; i++ ) {
  hovering=macro_button( i, sbx+16, (sby+8+64)+(48)*j, mx, my );
  if ( hovering ) {
   if ( clicking ) {
    if ( macro_recording ) {
     if ( macro_is_selected == i ) {
      macro_is_selected=-1;
     } else macro_is_selected=i;
    } else {
     clickDelay=1.0;
     if ( macro_send[i] ) {
      var temp=local_input;
      local_input=macro[i];
      network_dump(local_input);
      local_input=temp;
     } else local_input+=macro[i];
    }
   }
  }
  j++;
 }
 
 draw_set_color(c_dkgray);
 draw_rectangle( sbx+8, sby+8, sbx2-8, sby2-8, true );
 draw_sprite_ext( s_fansi_font_big, 26, sbx+16, sby+16, 1, 1, 0, c_white, 1 );
}

// input window
var iwx=0;
var iwy=room_height*0.8;
var iwx2=room_width;
var iwy2=room_height;

/*
if ( WITHIN(mx,my,iwx,iwy,iwx2,iwy2) ) {
 if ( mouse_check_button(mb_any) ) {
  draw_set_color(c_aqua);
  draw_rectangle(iwx,iwy,iwx2,iwy2,false);
 } else {
  draw_set_color(c_blue);
  draw_rectangle(iwx,iwy,iwx2,iwy2,false);
 }
} else {
 draw_set_color(make_color_rgb(0,12,32));
 draw_rectangle(iwx,iwy,iwx2,iwy2,false);
}
*/

draw_set_color(make_color_rgb(0,12,32));
draw_rectangle(iwx,iwy,iwx2,iwy2,false);

draw_set_font(input_font);
draw_set_color(c_gray);
//draw_text(12,12,global.screen_text);

cursorDelay-=1/room_speed;
if ( cursorDelay &lt; 0 ) {
 cursor="";
 if ( cursorDelay &gt; -cursorRate ) cursorDelay=cursorRate;
} else cursor=global.cursor; //"_"; //cursor=global.cursor;


//draw_set_color(c_orange);
/*draw_text( 12, room_height*0.8+8,
 "M:"+int(mcol)+","+int(mrow)+" '"+c+"' c("+int(ord(c))+")"
 +" P:"+int(col)+","+int(row)+"#"+int(global.network.lines)+" lines read"
 +"#&gt; "+local_input+cursor
);*/

datastr= "M:"+int(mcol)+","+int(mrow)+" '"+c+"' c("+int(ord(c))+")"
 +" P:"+int(col)+","+int(row)+"    "+int(global.network.lines)+" lines read";
uplength=string_length(global.output_queue);
if ( uplength &gt; 0 ) datastr+=", UPLOADING  "+int(uplength)+" bytes waiting to be sent";

write_fansi(
 datastr,
 s_term_font,
 1.0,
 12, room_height*0.8+8,
 202,-1,0,1, room_width*0.7
);

partial=cursor;
input_line_max=90;
input_max_lines=10;
input_lines=string_count(chr(13)+"",local_input);
input_chars=string_length(local_input);
input_max_charlines=input_line_max*input_max_lines;
if ( input_lines &gt; input_max_lines or string_length(local_input) &gt; input_max_charlines ) {
 len=input_max_charlines;
 draw_set_font(term12);
 do {
  start=input_chars-len;
  partial="(...more)"+string_copy(local_input, start, len);
  len-=10;
 } until ( string_height(partial) &lt; room_height*0.8-30 );
} else partial=local_input+cursor;

write_fansi(
 partial, 
 s_term_font,
 1.0,
 12, room_height*0.8+8+sprite_get_height(s_term_font),
 15,-1,0,1, room_width*0.7
);

if ( debug_mode ) {
 draw_set_color(c_black);
 draw_set_alpha(0.7);
 draw_rectangle(mx,my,mx+string_length(global.terminal.code[mcol,mrow+srow])*12,my+32,false);
 draw_set_alpha(1);
 draw_set_color(c_lime);
 draw_text( mx,my, global.terminal.code[mcol,mrow] );
 draw_text( mx,my+12, global.network.in_buffer );
}

if ( global.show_keyboard ) {
//draw_set_alpha(1);
//draw_set_color(c_gray);
//draw_rectangle(16,16,window_get_width()-64,384,false);
render_keyboard( global.keyboard_x,global.keyboard_y,0,0 );
// window_get_width()-16-sprite_get_width(s_controller)-16-500*global.keyboard_scale,
// window_get_height()-172*global.keyboard_scale,
// window_get_width(),window_get_height()//*0.8
//);
terminal_process_keyboard();
}

}////
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( keyboard_check(vk_control) ) {
 if ( prior_walkback == -1 ) {
  if ( string_length(local_input) &gt; 0 ) {
   prior_input[prior_inputs]=local_input;
   prior_inputs++;
  }
  prior_walkback=0;
 }
 else prior_walkback++;
 if ( prior_walkback &gt; prior_inputs ) prior_walkback=0;
 local_input=prior_input[prior_walkback];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( keyboard_check(vk_control) ) {
 if ( prior_walkback == -1 ) {
  if ( string_length(local_input) &gt; 0 ) {
   prior_input[prior_inputs+1]=local_input;
   prior_inputs++;
   local_input="";
  }
  prior_walkback=prior_inputs;
 }
 else prior_walkback--;
 if ( prior_walkback &lt; 0 ) prior_walkback=prior_inputs;
 local_input=prior_input[prior_walkback];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>input=local_input;
if ( string_length(local_input) &gt; 0 ) {
 prior_input[prior_inputs+1]=local_input;
 prior_inputs++;
}
prior_walkback=-1;
network_send();
local_input="";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var len=string_length(local_input);
local_input=string_delete(local_input,len,1);
backspace_pressed=0;
backspace_repeating=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>backspace_pressed=-1;
backspace_repeating=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
