<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.active_window=id;

get_string_message=-1;
getting_input=false;

global.terminal=id;

global.default_fore_color=7; // Default: gray
global.default_back_color=0; // Default: black
global.fore_color=global.default_fore_color;
global.back_color=global.default_back_color;

XOFS=0;
YOFS=0;
zoomDelay=0.5;

draw_ui=true;

blinkInstant=0.0;

idler=0;

clickDelay=0;

global.cursor=chr(22);

local_echo=true;

sidebar_is_open=false;
use_term_font=true;
double_font=false;
resize_font=true;
fscale=0.5;

scroll=0;

cursor="";
cursorRate=1;
cursorDelay=cursorRate;

// Terminal writing location
col=0;
row=0;

maxwidth=81;
maxrows=350;

//oldlen=0;
//len=0;
//maxcharacters=65535;
input="";
input_font=term5;
local_input="";

// Create the "terminal screen array" that stores fully colorized FANSI, limit ~400 lines
var i,j;
for ( j=0; j&lt;maxrows; j++ ) {
 for ( i=0; i&lt;maxwidth; i++ ) {
  character[i,j]=ord(" ");
  fore[i,j]=7;
  back[i,j]=0;
  code[i,j]="";
  _slow[i,j]=false;
  _fast[i,j]=false;
  _italic[i,j]=false;
  _strikethru[i,j]=false;
  _fraktur[i,j]=false;
  _underline[i,j]=false;
  _double[i,j]=false;  
 }
}

// init the ansi_code values

for ( i=0; i&lt;10; i++ ) {
 global.ansi_values[i]=0;
}

// ANSI / Terminal states
inverse=false;
bold=false;
underline=false;
double_ul=false;
italic=false;
script=false;
fraktur=false;
blink_slow=false;
blink_fast=false;
strikethru=false;

global.music_in=""; // Used by ansi music snarfer
global.show_note_when_music_plays=false;
// Sometimes when the async event is called, music gets truncated.  We continue collecting music until we encounter &lt;14&gt;?  Right now no.
continue_collecting_music=false;  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blinkInstant+=1/room_speed;

if ( clickDelay &gt; 0 ) clickDelay-=1/room_speed;

 local_input+=keyboard_string;
 keyboard_string="";

// "auto-idle"
idler++;
if ( idler &gt; room_speed*5 ) {
 var temp=local_echo;
 local_echo=false;
 network_dump("IDLE");
 local_echo=temp;
 idler=0;
}

var mx=window_mouse_get_x();
var my=window_mouse_get_y();

if ( zoomDelay &gt; 0 ) zoomDelay-=1/room_speed;
else if ( mouse_check_button(mb_right) ) {
 {
  zoomDelay=0.5;
  if ( fscale == 0.5 ) {
  fscale=1;
  } else if ( fscale == 1 ) {
   fscale=1.5;
  } else if ( fscale == 1.5 ) {
   fscale=2;
  } else if ( fscale == 2 ) {
   fscale=0.5;
  }
 }
} else if ( my &gt; window_get_height() * 0.75 ) {
 if ( mouse_check_button(mb_left) ) {
  zoomDelay=0.5;
  if ( not getting_input ) {
   get_string_message=get_string_async("8bitMUSH Code or Command:","");
   getting_input=true;
  }
 } 
} else {
 mx=window_get_width()-mx;
 if ( fscale == 0.5 ) {
  XOFS=-fscale*mx;
  YOFS=-fscale*my;
 } else if ( fscale == 1 ) {
  XOFS=-fscale*2*mx;
  YOFS=-fscale*2*my;
 } else if ( fscale == 1.5 ) {
  XOFS=-fscale*3*mx;
  YOFS=-fscale*3*my;
 } else if ( fscale == 2 ) {
  XOFS=-fscale*4*mx;
  YOFS=-fscale*4*my;
 }
}
//YOFS=-fscale*window_mouse_get_y();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="46">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var len=string_length(local_input);
local_input=string_delete(local_input,len,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var len=string_length(local_input);
local_input=string_delete(local_input,len,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_d = ds_map_find_value(async_load, "id");
if i_d == get_string_message
   {
   getting_input=false;
   if ds_map_find_value(async_load, "status")
      {
      if ds_map_find_value(async_load, "result") != ""
         {
          local_input = ds_map_find_value(async_load, "result");
          input=local_input;
          network_send();
          local_input="";
         }
      }
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( draw_ui ){////

var hovering;

draw_set_blend_mode(bm_normal);

var mx = window_mouse_get_x();
var my = window_mouse_get_y();

var clicking=mouse_check_button(mb_any) and clickDelay &lt;= 0;

if ( mouse_wheel_up() ) {
 scroll-=1;
} else if ( mouse_wheel_down() and scroll &lt; 10 ) {
 scroll+=1;
}

var mcol=0;
var mrow=0;
var c=" ";

var fw=8;
var fh=12;
var font;
if ( use_term_font ) font=s_term_font; // s_fansi
else font=s_fansi_font;
var text_scale=1;

   fw *= fscale;
   fh *= fscale;
   font=s_term_font;
   text_scale=fscale;

var display_rows=(window_get_height()*1)/6-1;
var srow=row-display_rows+scroll;
if ( srow &lt; 0 ) srow=0;
var i,j;
draw_set_font(fractur12);
for ( j=0; j&lt;display_rows; j++ ) {
 for ( i=0; i&lt;maxwidth; i++ ) {
  if ( j+srow &lt; maxrows ) {
   var p=i;
   var q=j+srow;
   var a=1;
   if ( global.terminal._slow[p,q] ) a=sin((blinkInstant/8)*pi);
   else
   if ( global.terminal._fast[p,q] ) a=cos((blinkInstant/4)*pi);
   var m=i * fw + XOFS;
   var n=j * fh + YOFS;
   var x1=m;
   var y1=n;
   var x2=m+fw-1;
   var y2=n+fh-1;
   draw_set_color(global.fansi_color[back[p,q]]);
   draw_rectangle(m,n,m+fw,n+fh,false);
   if ( WITHIN(mx,my,x1,y1,x2,y2) ) {
    draw_set_color(c_blue);
    mcol=i;
    mrow=j;
    c=chr(character[p,q]);
    draw_rectangle(m,n,m+fw-1,n+fh-1,true);
   } // else draw_set_color(make_color_rgb(32,32,32));
   if ( global.terminal.fraktur[p,q] )  {
    draw_set_color(global.fansi_color[fore[p,q]]);
    draw_text(m,n,chr(character[p,q]));
   } else { // Use active terminal font
    draw_sprite_ext(
     font,character[i,j+srow],
     m,n,text_scale,text_scale,0,global.fansi_color[fore[p,q]],a
    );
   }
   if ( global.terminal._underline[p,q] ) {
    draw_sprite_ext(
     font,95, // underscore
     m,n,text_scale,text_scale,0,global.fansi_color[fore[p,q]],a
    );
   }
   if ( global.terminal.strikethru[p,q] ) {
    draw_sprite_ext(
     font,196, // horiz-line
     m,n,text_scale,text_scale,0,global.fansi_color[fore[p,q]],a
    );
   }
  }
 }
}
 
if ( debug_mode ) {
 draw_set_color(c_black);
 draw_set_alpha(0.7);
 draw_rectangle(mx,my,mx+string_length(global.terminal.code[mcol,mrow+srow])*12,my+32,false);
 draw_set_alpha(1);
 draw_set_color(c_lime);
 draw_text( mx,my, global.terminal.code[mcol,mrow] );
 draw_text( mx,my+12, global.network.in_buffer );
}

}////
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zoomDelay=0.5;
if ( not getting_input ) {
 get_string_message=get_string_async("8bitMUSH Code or Command:","");
 getting_input=true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>input=local_input;
network_send();
local_input="";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
